name: Workloader Release
on:
  push:
    branches:
      - master
    paths:
      - version
      - "**/workloader-release.yml"
jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Set up Go 1.13
        uses: actions/setup-go@v1
        with:
          go-version: 1.13
        id: go

      - name: Check out code into the Go module directory
        uses: actions/checkout@v1

      - name: Get dependencies
        run: go mod download

      - name: Get workloader version
        id: get_version
        run: |
          echo "##[set-output name=version;]$(cat version)"
          echo "##[set-output name=commit;]$(git rev-list -1 HEAD)"

      - name: Make directories and copy CSV files
        run: |
          mkdir windows mac linux
          cp workload-identifier-default.csv ./windows
          cp workload-identifier-default.csv ./mac
          cp workload-identifier-default.csv ./linux

      - name: Build Windows executable
        run: GOOS=windows go build -ldflags "-X github.com/brian1917/workloader/utils.Version=$(cat version) -X github.com/brian1917/workloader/utils.Commit=$(git rev-list -1 HEAD)" -o ./windows/workloader.exe

      - name: Build Mac executable
        run: GOOS=darwin go build -ldflags "-X github.com/brian1917/workloader/utils.Version=$(cat version) -X github.com/brian1917/workloader/utils.Commit=$(git rev-list -1 HEAD)" -o ./mac/workloader

      - name: Build Linux executable
        run: GOOS=linux go build -ldflags "-X github.com/brian1917/workloader/utils.Version=$(cat version) -X github.com/brian1917/workloader/utils.Commit=$(git rev-list -1 HEAD)" -o ./linux/workloader

      - name: Create release zip packages
        run: |
          cd windows && zip -j ../windows-v${{ steps.get_version.outputs.version }}.zip . * && cd ..
          cd mac && zip -j ../mac-v${{ steps.get_version.outputs.version }}.zip . * && cd ..
          cd linux && zip -j ../linux-v${{ steps.get_version.outputs.version }}.zip . * && cd ..

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: v${{ steps.get_version.outputs.version }}
          release_name: Release ${{ steps.get_version.outputs.version }}
          draft: false
          prerelease: false

      - name: Upload Windows package
        id: upload-windows-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./windows-v${{ steps.get_version.outputs.version }}.zip
          asset_name: windows-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Mac package
        id: upload-mac-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./mac-v${{ steps.get_version.outputs.version }}.zip
          asset_name: mac-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip

      - name: Upload Linux package
        id: upload-linux-package
        uses: actions/upload-release-asset@v1.0.1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./linux-v${{ steps.get_version.outputs.version }}.zip
          asset_name: linux-v${{ steps.get_version.outputs.version }}.zip
          asset_content_type: application/zip
